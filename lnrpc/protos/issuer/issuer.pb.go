// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/issuer/issuer.proto

package issuer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	replicator "github.com/pkt-cash/pktd/lnd/lnrpc/protos/replicator"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// LockTokenRequest send information about token
type LockTokenRequest struct {
	// token — token name
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// count — number of tokens to lock
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// htlc — hash of preimagine
	Htlc string `protobuf:"bytes,3,opt,name=htlc,proto3" json:"htlc,omitempty"`
	// recipient — wallet addres of new owner of tokens
	Recipient string `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// proof_count — lock expiration time in PKT blocks
	ProofCount           int32    `protobuf:"varint,5,opt,name=proof_count,json=proofCount,proto3" json:"proof_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockTokenRequest) Reset()         { *m = LockTokenRequest{} }
func (m *LockTokenRequest) String() string { return proto.CompactTextString(m) }
func (*LockTokenRequest) ProtoMessage()    {}
func (*LockTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_868a71152c014334, []int{0}
}

func (m *LockTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockTokenRequest.Unmarshal(m, b)
}
func (m *LockTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockTokenRequest.Marshal(b, m, deterministic)
}
func (m *LockTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockTokenRequest.Merge(m, src)
}
func (m *LockTokenRequest) XXX_Size() int {
	return xxx_messageInfo_LockTokenRequest.Size(m)
}
func (m *LockTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockTokenRequest proto.InternalMessageInfo

func (m *LockTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LockTokenRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *LockTokenRequest) GetHtlc() string {
	if m != nil {
		return m.Htlc
	}
	return ""
}

func (m *LockTokenRequest) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *LockTokenRequest) GetProofCount() int32 {
	if m != nil {
		return m.ProofCount
	}
	return 0
}

// LockTokenResponse response with hash of lock
type LockTokenResponse struct {
	// lock_id — hash of lock
	LockId               string   `protobuf:"bytes,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockTokenResponse) Reset()         { *m = LockTokenResponse{} }
func (m *LockTokenResponse) String() string { return proto.CompactTextString(m) }
func (*LockTokenResponse) ProtoMessage()    {}
func (*LockTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_868a71152c014334, []int{1}
}

func (m *LockTokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockTokenResponse.Unmarshal(m, b)
}
func (m *LockTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockTokenResponse.Marshal(b, m, deterministic)
}
func (m *LockTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockTokenResponse.Merge(m, src)
}
func (m *LockTokenResponse) XXX_Size() int {
	return xxx_messageInfo_LockTokenResponse.Size(m)
}
func (m *LockTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LockTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LockTokenResponse proto.InternalMessageInfo

func (m *LockTokenResponse) GetLockId() string {
	if m != nil {
		return m.LockId
	}
	return ""
}

// SignTokenSellRequest — info about sell token
//
// Deprecated: Do not use.
type SignTokenSellRequest struct {
	// offer on sell token
	Offer                *replicator.TokenOffer `protobuf:"bytes,1,opt,name=offer,proto3" json:"offer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SignTokenSellRequest) Reset()         { *m = SignTokenSellRequest{} }
func (m *SignTokenSellRequest) String() string { return proto.CompactTextString(m) }
func (*SignTokenSellRequest) ProtoMessage()    {}
func (*SignTokenSellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_868a71152c014334, []int{2}
}

func (m *SignTokenSellRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignTokenSellRequest.Unmarshal(m, b)
}
func (m *SignTokenSellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignTokenSellRequest.Marshal(b, m, deterministic)
}
func (m *SignTokenSellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTokenSellRequest.Merge(m, src)
}
func (m *SignTokenSellRequest) XXX_Size() int {
	return xxx_messageInfo_SignTokenSellRequest.Size(m)
}
func (m *SignTokenSellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTokenSellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignTokenSellRequest proto.InternalMessageInfo

func (m *SignTokenSellRequest) GetOffer() *replicator.TokenOffer {
	if m != nil {
		return m.Offer
	}
	return nil
}

// SignTokenSellResponse — info about sign offer
//
// Deprecated: Do not use.
type SignTokenSellResponse struct {
	// issuer_signature signature on sell offer
	IssuerSignature      string   `protobuf:"bytes,1,opt,name=issuer_signature,json=issuerSignature,proto3" json:"issuer_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignTokenSellResponse) Reset()         { *m = SignTokenSellResponse{} }
func (m *SignTokenSellResponse) String() string { return proto.CompactTextString(m) }
func (*SignTokenSellResponse) ProtoMessage()    {}
func (*SignTokenSellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_868a71152c014334, []int{3}
}

func (m *SignTokenSellResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignTokenSellResponse.Unmarshal(m, b)
}
func (m *SignTokenSellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignTokenSellResponse.Marshal(b, m, deterministic)
}
func (m *SignTokenSellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTokenSellResponse.Merge(m, src)
}
func (m *SignTokenSellResponse) XXX_Size() int {
	return xxx_messageInfo_SignTokenSellResponse.Size(m)
}
func (m *SignTokenSellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTokenSellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignTokenSellResponse proto.InternalMessageInfo

func (m *SignTokenSellResponse) GetIssuerSignature() string {
	if m != nil {
		return m.IssuerSignature
	}
	return ""
}

func init() {
	proto.RegisterType((*LockTokenRequest)(nil), "issuer.LockTokenRequest")
	proto.RegisterType((*LockTokenResponse)(nil), "issuer.LockTokenResponse")
	proto.RegisterType((*SignTokenSellRequest)(nil), "issuer.SignTokenSellRequest")
	proto.RegisterType((*SignTokenSellResponse)(nil), "issuer.SignTokenSellResponse")
}

func init() { proto.RegisterFile("protos/issuer/issuer.proto", fileDescriptor_868a71152c014334) }

var fileDescriptor_868a71152c014334 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0x57, 0xd2, 0xa5, 0xa8, 0x6f, 0x4c, 0x0c, 0x6b, 0x8c, 0x10, 0x36, 0x2d, 0xca, 0xa9, 0x48,
	0x23, 0x41, 0xe5, 0xc6, 0x09, 0x31, 0xf1, 0x67, 0xd2, 0x24, 0xb4, 0x94, 0x13, 0x97, 0xaa, 0x75,
	0x5f, 0x52, 0x2b, 0x59, 0x6c, 0x6c, 0x07, 0x89, 0x6f, 0xc0, 0x95, 0xef, 0xc3, 0x87, 0x43, 0xb6,
	0x13, 0x96, 0x55, 0xed, 0xa1, 0xea, 0xfb, 0xfd, 0xd1, 0xcf, 0xef, 0xd9, 0x2f, 0x10, 0x09, 0xc9,
	0x35, 0x57, 0x19, 0x53, 0xaa, 0x45, 0xd9, 0xfd, 0xa5, 0x96, 0x24, 0x63, 0x87, 0xa2, 0x97, 0x25,
	0xe7, 0x65, 0x8d, 0x99, 0x65, 0x57, 0x6d, 0x91, 0xe1, 0x9d, 0xd0, 0xbf, 0x9c, 0x29, 0x4a, 0xba,
	0x00, 0x89, 0xa2, 0x66, 0x74, 0xa9, 0xb9, 0x1c, 0x94, 0xce, 0x93, 0xfc, 0xf1, 0xe0, 0xf8, 0x86,
	0xd3, 0xea, 0x1b, 0xaf, 0xb0, 0xc9, 0xf1, 0x47, 0x8b, 0x4a, 0x93, 0x13, 0x08, 0xb4, 0xc1, 0xa1,
	0x17, 0x7b, 0xd3, 0x49, 0xee, 0x80, 0x61, 0x29, 0x6f, 0x1b, 0x1d, 0xfa, 0xb1, 0x37, 0x1d, 0xe5,
	0x0e, 0x10, 0x02, 0x07, 0x1b, 0x5d, 0xd3, 0x70, 0x64, 0xad, 0xb6, 0x26, 0x67, 0x30, 0x91, 0x48,
	0x99, 0x60, 0xd8, 0xe8, 0xf0, 0xc0, 0x0a, 0xf7, 0x04, 0xb9, 0x80, 0x43, 0x21, 0x39, 0x2f, 0x16,
	0x2e, 0x2d, 0x88, 0xbd, 0x69, 0x90, 0x83, 0xa5, 0xae, 0x0c, 0x93, 0x5c, 0xc2, 0xd3, 0x41, 0x4b,
	0x4a, 0xf0, 0x46, 0x21, 0x79, 0x0e, 0x8f, 0x6a, 0x4e, 0xab, 0x05, 0x5b, 0x77, 0x5d, 0x8d, 0x0d,
	0xbc, 0x5e, 0x27, 0x5f, 0xe0, 0x64, 0xce, 0xca, 0xc6, 0xba, 0xe7, 0x58, 0xd7, 0xfd, 0x10, 0x97,
	0x10, 0xf0, 0xa2, 0x40, 0x69, 0xed, 0x87, 0xb3, 0xd3, 0x74, 0x30, 0xbb, 0x35, 0x7f, 0x35, 0x6a,
	0xee, 0x4c, 0xef, 0xfc, 0xd0, 0x4b, 0x3e, 0xc1, 0xb3, 0xad, 0xa4, 0xee, 0xec, 0x57, 0x70, 0xec,
	0xee, 0x7b, 0xa1, 0x58, 0xd9, 0x2c, 0x75, 0x2b, 0xb1, 0x6b, 0xe2, 0x89, 0xe3, 0xe7, 0x3d, 0x6d,
	0x72, 0x66, 0x7f, 0x7d, 0x38, 0xba, 0x76, 0x3c, 0xca, 0x9f, 0x8c, 0x22, 0xb9, 0x85, 0xa3, 0x07,
	0xc9, 0xe4, 0x2c, 0xed, 0x9e, 0x73, 0x57, 0xeb, 0xd1, 0xf9, 0x1e, 0xd5, 0xb5, 0x93, 0x8c, 0x7e,
	0xfb, 0x1e, 0xb9, 0x02, 0xb0, 0x67, 0x58, 0x99, 0x9c, 0x0f, 0xa7, 0xbb, 0xe7, 0xfb, 0xc0, 0xd3,
	0xd4, 0xed, 0x49, 0xda, 0xef, 0x49, 0xfa, 0xd1, 0xec, 0x09, 0xb9, 0x85, 0xc7, 0x9f, 0x51, 0x5b,
	0xeb, 0x0d, 0x53, 0x9a, 0x5c, 0x0c, 0x63, 0x86, 0x4a, 0x1f, 0x14, 0xef, 0x37, 0x74, 0x77, 0xf5,
	0x1e, 0x26, 0xff, 0x1f, 0x8f, 0x84, 0xfd, 0x20, 0xdb, 0x2b, 0x16, 0xbd, 0xd8, 0xa1, 0xb8, 0x84,
	0x0f, 0xb3, 0xef, 0x6f, 0x4a, 0xa6, 0x37, 0xed, 0x2a, 0xa5, 0xfc, 0x2e, 0x13, 0x95, 0x7e, 0x4d,
	0x97, 0x6a, 0x63, 0x8a, 0x75, 0x56, 0x37, 0xe6, 0x27, 0x05, 0xcd, 0x1e, 0x7c, 0x1c, 0xab, 0xb1,
	0x85, 0x6f, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xca, 0xae, 0x12, 0x34, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IssuerServiceClient is the client API for IssuerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IssuerServiceClient interface {
	// SignTokenSell Returns token sell signature for further
	// registration along with offer via Replication Server
	SignTokenSell(ctx context.Context, in *SignTokenSellRequest, opts ...grpc.CallOption) (*SignTokenSellResponse, error)
	// IssueToken — Issue new token with given data. Request data equal to
	// token purchase data, because it is token offer.
	/// Caleb: This is user interface, I don't want to address this until we have completed the p2p protocol.
	IssueToken(ctx context.Context, in *replicator.IssueTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetTokenList — Return list of issued token with information about
	// expiration time and fix price.
	GetTokenList(ctx context.Context, in *replicator.GetTokenListRequest, opts ...grpc.CallOption) (*replicator.GetTokenListResponse, error)
	// LockToken — Return hash of lock token for verify htlc and information
	// about transaction
	/// Caleb: This RPC should also be available on a replicator. When
	// LockToken is called on the replicator, it simply replicates the
	// LockTokenRequest to other replicators and to the issuer. This is needed
	// in order to make sure the issuer is honest and does not try to cheat at
	// locking a token when they are supposed to.
	LockToken(ctx context.Context, in *LockTokenRequest, opts ...grpc.CallOption) (*LockTokenResponse, error)
}

type issuerServiceClient struct {
	cc *grpc.ClientConn
}

func NewIssuerServiceClient(cc *grpc.ClientConn) IssuerServiceClient {
	return &issuerServiceClient{cc}
}

// Deprecated: Do not use.
func (c *issuerServiceClient) SignTokenSell(ctx context.Context, in *SignTokenSellRequest, opts ...grpc.CallOption) (*SignTokenSellResponse, error) {
	out := new(SignTokenSellResponse)
	err := c.cc.Invoke(ctx, "/issuer.IssuerService/SignTokenSell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerServiceClient) IssueToken(ctx context.Context, in *replicator.IssueTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/issuer.IssuerService/IssueToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerServiceClient) GetTokenList(ctx context.Context, in *replicator.GetTokenListRequest, opts ...grpc.CallOption) (*replicator.GetTokenListResponse, error) {
	out := new(replicator.GetTokenListResponse)
	err := c.cc.Invoke(ctx, "/issuer.IssuerService/GetTokenList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerServiceClient) LockToken(ctx context.Context, in *LockTokenRequest, opts ...grpc.CallOption) (*LockTokenResponse, error) {
	out := new(LockTokenResponse)
	err := c.cc.Invoke(ctx, "/issuer.IssuerService/LockToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssuerServiceServer is the server API for IssuerService service.
type IssuerServiceServer interface {
	// SignTokenSell Returns token sell signature for further
	// registration along with offer via Replication Server
	SignTokenSell(context.Context, *SignTokenSellRequest) (*SignTokenSellResponse, error)
	// IssueToken — Issue new token with given data. Request data equal to
	// token purchase data, because it is token offer.
	/// Caleb: This is user interface, I don't want to address this until we have completed the p2p protocol.
	IssueToken(context.Context, *replicator.IssueTokenRequest) (*empty.Empty, error)
	// GetTokenList — Return list of issued token with information about
	// expiration time and fix price.
	GetTokenList(context.Context, *replicator.GetTokenListRequest) (*replicator.GetTokenListResponse, error)
	// LockToken — Return hash of lock token for verify htlc and information
	// about transaction
	/// Caleb: This RPC should also be available on a replicator. When
	// LockToken is called on the replicator, it simply replicates the
	// LockTokenRequest to other replicators and to the issuer. This is needed
	// in order to make sure the issuer is honest and does not try to cheat at
	// locking a token when they are supposed to.
	LockToken(context.Context, *LockTokenRequest) (*LockTokenResponse, error)
}

// UnimplementedIssuerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIssuerServiceServer struct {
}

func (*UnimplementedIssuerServiceServer) SignTokenSell(ctx context.Context, req *SignTokenSellRequest) (*SignTokenSellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTokenSell not implemented")
}
func (*UnimplementedIssuerServiceServer) IssueToken(ctx context.Context, req *replicator.IssueTokenRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueToken not implemented")
}
func (*UnimplementedIssuerServiceServer) GetTokenList(ctx context.Context, req *replicator.GetTokenListRequest) (*replicator.GetTokenListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenList not implemented")
}
func (*UnimplementedIssuerServiceServer) LockToken(ctx context.Context, req *LockTokenRequest) (*LockTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockToken not implemented")
}

func RegisterIssuerServiceServer(s *grpc.Server, srv IssuerServiceServer) {
	s.RegisterService(&_IssuerService_serviceDesc, srv)
}

func _IssuerService_SignTokenSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTokenSellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServiceServer).SignTokenSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer.IssuerService/SignTokenSell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServiceServer).SignTokenSell(ctx, req.(*SignTokenSellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssuerService_IssueToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(replicator.IssueTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServiceServer).IssueToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer.IssuerService/IssueToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServiceServer).IssueToken(ctx, req.(*replicator.IssueTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssuerService_GetTokenList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(replicator.GetTokenListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServiceServer).GetTokenList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer.IssuerService/GetTokenList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServiceServer).GetTokenList(ctx, req.(*replicator.GetTokenListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssuerService_LockToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServiceServer).LockToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer.IssuerService/LockToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServiceServer).LockToken(ctx, req.(*LockTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IssuerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "issuer.IssuerService",
	HandlerType: (*IssuerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignTokenSell",
			Handler:    _IssuerService_SignTokenSell_Handler,
		},
		{
			MethodName: "IssueToken",
			Handler:    _IssuerService_IssueToken_Handler,
		},
		{
			MethodName: "GetTokenList",
			Handler:    _IssuerService_GetTokenList_Handler,
		},
		{
			MethodName: "LockToken",
			Handler:    _IssuerService_LockToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/issuer/issuer.proto",
}
