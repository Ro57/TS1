// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/DB/tokendb.proto

package DB

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	justifications "github.com/pkt-cash/pktd/lnd/lnrpc/protos/justifications"
	lock "github.com/pkt-cash/pktd/lnd/lnrpc/protos/lock"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Block is struct of block in blockchain
type Block struct {
	// prev_block — hash of previous block
	PrevBlock string `protobuf:"bytes,1,opt,name=prev_block,json=prevBlock,proto3" json:"prev_block,omitempty"`
	// justification — one of justification structure with payload information.
	//
	// Types that are valid to be assigned to Justification:
	//	*Block_Lock
	//	*Block_Transfer
	//	*Block_LockOver
	//	*Block_Genesis
	Justification isBlock_Justification `protobuf_oneof:"justification"`
	// creation — date of block creation in unix time format
	Creation int64 `protobuf:"varint,5,opt,name=creation,proto3" json:"creation,omitempty"`
	// state — hash of state structure containing locks, owners and meta token
	// info
	State string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	// pkt_block_hash —  the hash of the most recent PKT block
	PktBlockHash string `protobuf:"bytes,7,opt,name=pkt_block_hash,json=pktBlockHash,proto3" json:"pkt_block_hash,omitempty"`
	// pkt_block_height — the height of the most recent PKT block
	PktBlockHeight int32 `protobuf:"varint,8,opt,name=pkt_block_height,json=pktBlockHeight,proto3" json:"pkt_block_height,omitempty"`
	// height — the current height of this TokenStrike chain
	Height uint64 `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
	// signature — issuer ID, needed for validate. If signature incorrect block
	// is not valid
	Signature            string   `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_87f335e4a205f88b, []int{0}
}

func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetPrevBlock() string {
	if m != nil {
		return m.PrevBlock
	}
	return ""
}

type isBlock_Justification interface {
	isBlock_Justification()
}

type Block_Lock struct {
	Lock *justifications.LockToken `protobuf:"bytes,2,opt,name=lock,proto3,oneof"`
}

type Block_Transfer struct {
	Transfer *justifications.TranferToken `protobuf:"bytes,3,opt,name=transfer,proto3,oneof"`
}

type Block_LockOver struct {
	LockOver *justifications.LockTimeOver `protobuf:"bytes,4,opt,name=lock_over,json=lockOver,proto3,oneof"`
}

type Block_Genesis struct {
	Genesis *justifications.Genesis `protobuf:"bytes,11,opt,name=genesis,proto3,oneof"`
}

func (*Block_Lock) isBlock_Justification() {}

func (*Block_Transfer) isBlock_Justification() {}

func (*Block_LockOver) isBlock_Justification() {}

func (*Block_Genesis) isBlock_Justification() {}

func (m *Block) GetJustification() isBlock_Justification {
	if m != nil {
		return m.Justification
	}
	return nil
}

func (m *Block) GetLock() *justifications.LockToken {
	if x, ok := m.GetJustification().(*Block_Lock); ok {
		return x.Lock
	}
	return nil
}

func (m *Block) GetTransfer() *justifications.TranferToken {
	if x, ok := m.GetJustification().(*Block_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (m *Block) GetLockOver() *justifications.LockTimeOver {
	if x, ok := m.GetJustification().(*Block_LockOver); ok {
		return x.LockOver
	}
	return nil
}

func (m *Block) GetGenesis() *justifications.Genesis {
	if x, ok := m.GetJustification().(*Block_Genesis); ok {
		return x.Genesis
	}
	return nil
}

func (m *Block) GetCreation() int64 {
	if m != nil {
		return m.Creation
	}
	return 0
}

func (m *Block) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Block) GetPktBlockHash() string {
	if m != nil {
		return m.PktBlockHash
	}
	return ""
}

func (m *Block) GetPktBlockHeight() int32 {
	if m != nil {
		return m.PktBlockHeight
	}
	return 0
}

func (m *Block) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Block) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Block) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Block_Lock)(nil),
		(*Block_Transfer)(nil),
		(*Block_LockOver)(nil),
		(*Block_Genesis)(nil),
	}
}

// Owner contains information about the holders' wallets and their balances
type Owner struct {
	// holder_wallet — hash of wallet address of holder
	HolderWallet string `protobuf:"bytes,1,opt,name=holder_wallet,json=holderWallet,proto3" json:"holder_wallet,omitempty"`
	// count — number of tokens held on wallet
	Count                int64    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Owner) Reset()         { *m = Owner{} }
func (m *Owner) String() string { return proto.CompactTextString(m) }
func (*Owner) ProtoMessage()    {}
func (*Owner) Descriptor() ([]byte, []int) {
	return fileDescriptor_87f335e4a205f88b, []int{1}
}

func (m *Owner) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Owner.Unmarshal(m, b)
}
func (m *Owner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Owner.Marshal(b, m, deterministic)
}
func (m *Owner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Owner.Merge(m, src)
}
func (m *Owner) XXX_Size() int {
	return xxx_messageInfo_Owner.Size(m)
}
func (m *Owner) XXX_DiscardUnknown() {
	xxx_messageInfo_Owner.DiscardUnknown(m)
}

var xxx_messageInfo_Owner proto.InternalMessageInfo

func (m *Owner) GetHolderWallet() string {
	if m != nil {
		return m.HolderWallet
	}
	return ""
}

func (m *Owner) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// Token contain information about token
type Token struct {
	// count — number of issued tokens;
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// expiration — number of PKT block after which the token expires
	Expiration int32 `protobuf:"varint,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// creation — date of token creation in unix time format
	Creation int64 `protobuf:"varint,3,opt,name=creation,proto3" json:"creation,omitempty"`
	// issuer_pubkey — public key of issuer used for signing
	IssuerPubkey string `protobuf:"bytes,4,opt,name=issuer_pubkey,json=issuerPubkey,proto3" json:"issuer_pubkey,omitempty"`
	// urls — set of urls for access to blockchain
	Urls                 []string `protobuf:"bytes,5,rep,name=urls,proto3" json:"urls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_87f335e4a205f88b, []int{2}
}

func (m *Token) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Token.Unmarshal(m, b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Token.Marshal(b, m, deterministic)
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return xxx_messageInfo_Token.Size(m)
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Token) GetExpiration() int32 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *Token) GetCreation() int64 {
	if m != nil {
		return m.Creation
	}
	return 0
}

func (m *Token) GetIssuerPubkey() string {
	if m != nil {
		return m.IssuerPubkey
	}
	return ""
}

func (m *Token) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

// State is a current state of blockchain
type State struct {
	// token — metadata about token
	Token *Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// owners — a set of structures with addresses and their balances
	Owners []*Owner `protobuf:"bytes,2,rep,name=owners,proto3" json:"owners,omitempty"`
	// locks — set of lock structures
	Locks                []*lock.Lock `protobuf:"bytes,3,rep,name=locks,proto3" json:"locks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_87f335e4a205f88b, []int{3}
}

func (m *State) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_State.Unmarshal(m, b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_State.Marshal(b, m, deterministic)
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return xxx_messageInfo_State.Size(m)
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *State) GetOwners() []*Owner {
	if m != nil {
		return m.Owners
	}
	return nil
}

func (m *State) GetLocks() []*lock.Lock {
	if m != nil {
		return m.Locks
	}
	return nil
}

func init() {
	proto.RegisterType((*Block)(nil), "tokendb.Block")
	proto.RegisterType((*Owner)(nil), "tokendb.Owner")
	proto.RegisterType((*Token)(nil), "tokendb.Token")
	proto.RegisterType((*State)(nil), "tokendb.State")
}

func init() { proto.RegisterFile("protos/DB/tokendb.proto", fileDescriptor_87f335e4a205f88b) }

var fileDescriptor_87f335e4a205f88b = []byte{
	// 523 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x6f, 0x8b, 0xd3, 0x30,
	0x18, 0xbf, 0x5e, 0xd7, 0xdd, 0xfa, 0xec, 0x8f, 0x12, 0xe4, 0x2e, 0x8e, 0x53, 0xca, 0x4e, 0xa4,
	0x88, 0xb6, 0x70, 0xf7, 0x4e, 0xdf, 0x0d, 0xc1, 0xbd, 0x10, 0x4e, 0xe2, 0x81, 0xe0, 0x9b, 0xd1,
	0x75, 0xd9, 0x5a, 0xdb, 0x6b, 0x4a, 0x92, 0x6e, 0xfa, 0x35, 0xfc, 0x60, 0x7e, 0x26, 0xc9, 0x93,
	0x6e, 0x6e, 0xc3, 0x17, 0x1b, 0xf9, 0xfd, 0x5b, 0x92, 0xdf, 0xb3, 0xc0, 0x55, 0x2d, 0x85, 0x16,
	0x2a, 0xfe, 0x38, 0x8d, 0xb5, 0x28, 0x78, 0xb5, 0x5c, 0x44, 0xc8, 0x90, 0x8b, 0x16, 0x8e, 0xdf,
	0xb4, 0x8e, 0x1f, 0x8d, 0xd2, 0xf9, 0x2a, 0x4f, 0x13, 0x9d, 0x8b, 0xea, 0x14, 0xda, 0xd0, 0xf8,
	0xb2, 0xf5, 0x96, 0x22, 0x2d, 0xf0, 0xcb, 0xf2, 0x93, 0x3f, 0x2e, 0x78, 0x53, 0x83, 0xc9, 0x0b,
	0x80, 0x5a, 0xf2, 0xcd, 0x7c, 0x61, 0x10, 0x75, 0x02, 0x27, 0xf4, 0x99, 0x6f, 0x18, 0x2b, 0xc7,
	0xd0, 0x41, 0xe1, 0x3c, 0x70, 0xc2, 0xfe, 0xed, 0xf3, 0xe8, 0x64, 0x97, 0xcf, 0x22, 0x2d, 0x1e,
	0xcc, 0xb9, 0x66, 0x67, 0x0c, 0x8d, 0xe4, 0x3d, 0xf4, 0xb4, 0x4c, 0x2a, 0xb5, 0xe2, 0x92, 0xba,
	0x18, 0xba, 0x3e, 0x0d, 0x3d, 0xc8, 0xa4, 0x5a, 0x71, 0xb9, 0xcb, 0xed, 0xfd, 0xe4, 0x03, 0xf8,
	0xe6, 0x37, 0xe6, 0x62, 0xc3, 0x25, 0xed, 0xfc, 0x3f, 0x8c, 0x3b, 0xe6, 0x8f, 0xfc, 0x7e, 0xc3,
	0xa5, 0x09, 0x9b, 0x80, 0x59, 0x93, 0x3b, 0xb8, 0x58, 0xf3, 0x8a, 0xab, 0x5c, 0xd1, 0x3e, 0x46,
	0xaf, 0x4e, 0xa3, 0x9f, 0xac, 0x3c, 0x3b, 0x63, 0x3b, 0x27, 0x19, 0x43, 0x2f, 0x95, 0x1c, 0x75,
	0xea, 0x05, 0x4e, 0xe8, 0xb2, 0x3d, 0x26, 0xcf, 0xc0, 0x53, 0x3a, 0xd1, 0x9c, 0x76, 0xb1, 0x14,
	0x0b, 0xc8, 0x2b, 0x18, 0xd5, 0x85, 0xb6, 0x75, 0xcd, 0xb3, 0x44, 0x65, 0xf4, 0x02, 0xe5, 0x41,
	0x5d, 0x68, 0xac, 0x6c, 0x96, 0xa8, 0x8c, 0x84, 0xf0, 0xf4, 0xc0, 0xc5, 0xf3, 0x75, 0xa6, 0x69,
	0x2f, 0x70, 0x42, 0x8f, 0x8d, 0xf6, 0x3e, 0x64, 0xc9, 0x25, 0x74, 0x5b, 0xdd, 0x0f, 0x9c, 0xb0,
	0xc3, 0x5a, 0x44, 0xae, 0xc1, 0x57, 0xf9, 0xba, 0x4a, 0x74, 0x23, 0x39, 0x05, 0x3b, 0x96, 0x3d,
	0x31, 0x7d, 0x02, 0xc3, 0xa3, 0xcb, 0x4d, 0xa6, 0xe0, 0xdd, 0x6f, 0x2b, 0x2e, 0xc9, 0x0d, 0x0c,
	0x33, 0x51, 0x2e, 0xb9, 0x9c, 0x6f, 0x93, 0xb2, 0xe4, 0xba, 0x1d, 0xe9, 0xc0, 0x92, 0xdf, 0x90,
	0x33, 0x57, 0x4b, 0x45, 0x53, 0x69, 0x1c, 0xab, 0xcb, 0x2c, 0x98, 0xfc, 0x76, 0xc0, 0xc3, 0xa1,
	0xfc, 0xd3, 0x9d, 0x03, 0x9d, 0xbc, 0x04, 0xe0, 0x3f, 0xeb, 0x5c, 0xda, 0xba, 0xce, 0xf1, 0x3a,
	0x07, 0xcc, 0x51, 0x99, 0xee, 0x49, 0x99, 0x37, 0x30, 0xcc, 0x95, 0x6a, 0xb8, 0x9c, 0xd7, 0xcd,
	0xa2, 0xe0, 0xbf, 0x70, 0xbc, 0x3e, 0x1b, 0x58, 0xf2, 0x0b, 0x72, 0x84, 0x40, 0xa7, 0x91, 0xa5,
	0xa2, 0x5e, 0xe0, 0x86, 0x3e, 0xc3, 0xf5, 0x64, 0x0b, 0xde, 0xd7, 0xb6, 0x78, 0x0f, 0x5f, 0x00,
	0x9e, 0xa9, 0x7f, 0x3b, 0x8a, 0x76, 0xcf, 0x03, 0x8f, 0xcc, 0xac, 0x48, 0x5e, 0x43, 0x57, 0x98,
	0x1e, 0x14, 0x3d, 0x0f, 0xdc, 0x23, 0x1b, 0xd6, 0xc3, 0x5a, 0x95, 0x04, 0xe0, 0x99, 0x21, 0x28,
	0xea, 0xa2, 0x0d, 0x22, 0x7c, 0x1c, 0xe6, 0xcf, 0xc5, 0xac, 0x30, 0x8d, 0xbe, 0xbf, 0x5d, 0xe7,
	0x3a, 0x6b, 0x16, 0x51, 0x2a, 0x1e, 0xe3, 0xba, 0xd0, 0xef, 0xd2, 0x44, 0x65, 0x66, 0xb1, 0x8c,
	0xcb, 0xca, 0x7c, 0x64, 0x9d, 0xc6, 0xfb, 0xd7, 0xba, 0xe8, 0xe2, 0xf2, 0xee, 0x6f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xb3, 0x3b, 0xbc, 0x64, 0xc1, 0x03, 0x00, 0x00,
}
