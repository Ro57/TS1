// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/replicator/replicator.proto

package replicator

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetTokenOffersRequest struct {
	IssuerId             string      `protobuf:"bytes,1,opt,name=issuer_id,json=issuerId,proto3" json:"issuer_id,omitempty"`
	Params               *Pagination `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetTokenOffersRequest) Reset()         { *m = GetTokenOffersRequest{} }
func (m *GetTokenOffersRequest) String() string { return proto.CompactTextString(m) }
func (*GetTokenOffersRequest) ProtoMessage()    {}
func (*GetTokenOffersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{0}
}

func (m *GetTokenOffersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokenOffersRequest.Unmarshal(m, b)
}
func (m *GetTokenOffersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokenOffersRequest.Marshal(b, m, deterministic)
}
func (m *GetTokenOffersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenOffersRequest.Merge(m, src)
}
func (m *GetTokenOffersRequest) XXX_Size() int {
	return xxx_messageInfo_GetTokenOffersRequest.Size(m)
}
func (m *GetTokenOffersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenOffersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenOffersRequest proto.InternalMessageInfo

func (m *GetTokenOffersRequest) GetIssuerId() string {
	if m != nil {
		return m.IssuerId
	}
	return ""
}

func (m *GetTokenOffersRequest) GetParams() *Pagination {
	if m != nil {
		return m.Params
	}
	return nil
}

type GetTokenOffersResponse struct {
	Offers               []*TokenOffer `protobuf:"bytes,1,rep,name=offers,proto3" json:"offers,omitempty"`
	Total                uint64        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetTokenOffersResponse) Reset()         { *m = GetTokenOffersResponse{} }
func (m *GetTokenOffersResponse) String() string { return proto.CompactTextString(m) }
func (*GetTokenOffersResponse) ProtoMessage()    {}
func (*GetTokenOffersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{1}
}

func (m *GetTokenOffersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokenOffersResponse.Unmarshal(m, b)
}
func (m *GetTokenOffersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokenOffersResponse.Marshal(b, m, deterministic)
}
func (m *GetTokenOffersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenOffersResponse.Merge(m, src)
}
func (m *GetTokenOffersResponse) XXX_Size() int {
	return xxx_messageInfo_GetTokenOffersResponse.Size(m)
}
func (m *GetTokenOffersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenOffersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenOffersResponse proto.InternalMessageInfo

func (m *GetTokenOffersResponse) GetOffers() []*TokenOffer {
	if m != nil {
		return m.Offers
	}
	return nil
}

func (m *GetTokenOffersResponse) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

// GetTokenListRequest — request token list with pagination
type GetTokenListRequest struct {
	// issuer_id is user login issued this token
	IssuerId string `protobuf:"bytes,1,opt,name=issuer_id,json=issuerId,proto3" json:"issuer_id,omitempty"`
	// params of paginaton
	Params               *Pagination `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetTokenListRequest) Reset()         { *m = GetTokenListRequest{} }
func (m *GetTokenListRequest) String() string { return proto.CompactTextString(m) }
func (*GetTokenListRequest) ProtoMessage()    {}
func (*GetTokenListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{2}
}

func (m *GetTokenListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokenListRequest.Unmarshal(m, b)
}
func (m *GetTokenListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokenListRequest.Marshal(b, m, deterministic)
}
func (m *GetTokenListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenListRequest.Merge(m, src)
}
func (m *GetTokenListRequest) XXX_Size() int {
	return xxx_messageInfo_GetTokenListRequest.Size(m)
}
func (m *GetTokenListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenListRequest proto.InternalMessageInfo

func (m *GetTokenListRequest) GetIssuerId() string {
	if m != nil {
		return m.IssuerId
	}
	return ""
}

func (m *GetTokenListRequest) GetParams() *Pagination {
	if m != nil {
		return m.Params
	}
	return nil
}

// GetTokenListResponse — list of tokens with additional info
type GetTokenListResponse struct {
	// tokens list of registred tokens
	Tokens []*TokenOffer `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	// total number of registered tokens, if the issued_id is passed, only
	// its tokens are taken into account
	Total                int32    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTokenListResponse) Reset()         { *m = GetTokenListResponse{} }
func (m *GetTokenListResponse) String() string { return proto.CompactTextString(m) }
func (*GetTokenListResponse) ProtoMessage()    {}
func (*GetTokenListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{3}
}

func (m *GetTokenListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokenListResponse.Unmarshal(m, b)
}
func (m *GetTokenListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokenListResponse.Marshal(b, m, deterministic)
}
func (m *GetTokenListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenListResponse.Merge(m, src)
}
func (m *GetTokenListResponse) XXX_Size() int {
	return xxx_messageInfo_GetTokenListResponse.Size(m)
}
func (m *GetTokenListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenListResponse proto.InternalMessageInfo

func (m *GetTokenListResponse) GetTokens() []*TokenOffer {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *GetTokenListResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type TokenOffer struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// TODO: discuss
	//  ? Should we assume decimal prices
	//  ? Add units field
	Price      uint64      `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	IssuerInfo *IssuerInfo `protobuf:"bytes,3,opt,name=issuer_info,json=issuerInfo,proto3" json:"issuer_info,omitempty"`
	// It is assumed that the each registered token holder login is unique
	//
	// Value of this field may be empty orRegisterTokenHolder filled depending
	// on context (e.g. gettokenoffers, verifytokenpurchasesignature)
	TokenHolderLogin string `protobuf:"bytes,4,opt,name=token_holder_login,json=tokenHolderLogin,proto3" json:"token_holder_login,omitempty"`
	// It is assumed that the each registered token holder login is unique
	//
	// Value of this field may be empty or filled depending on context
	// (e.g. gettokenoffers, verifytokenpurchasesignature)
	TokenBuyerLogin string `protobuf:"bytes,5,opt,name=token_buyer_login,json=tokenBuyerLogin,proto3" json:"token_buyer_login,omitempty"`
	// This field protects issuers from such a case, when potential buyer
	// successfully acquires dozens of signatures just in case if that issuer
	// would raise up the price later. If a Token Wallet holder would like to
	// open channel with an outdated offer, Replicator would reject to register
	// this purchase and buyer stays unprotected
	ValidUntilSeconds    int64    `protobuf:"varint,6,opt,name=valid_until_seconds,json=validUntilSeconds,proto3" json:"valid_until_seconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenOffer) Reset()         { *m = TokenOffer{} }
func (m *TokenOffer) String() string { return proto.CompactTextString(m) }
func (*TokenOffer) ProtoMessage()    {}
func (*TokenOffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{4}
}

func (m *TokenOffer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenOffer.Unmarshal(m, b)
}
func (m *TokenOffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenOffer.Marshal(b, m, deterministic)
}
func (m *TokenOffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenOffer.Merge(m, src)
}
func (m *TokenOffer) XXX_Size() int {
	return xxx_messageInfo_TokenOffer.Size(m)
}
func (m *TokenOffer) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenOffer.DiscardUnknown(m)
}

var xxx_messageInfo_TokenOffer proto.InternalMessageInfo

func (m *TokenOffer) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TokenOffer) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TokenOffer) GetIssuerInfo() *IssuerInfo {
	if m != nil {
		return m.IssuerInfo
	}
	return nil
}

func (m *TokenOffer) GetTokenHolderLogin() string {
	if m != nil {
		return m.TokenHolderLogin
	}
	return ""
}

func (m *TokenOffer) GetTokenBuyerLogin() string {
	if m != nil {
		return m.TokenBuyerLogin
	}
	return ""
}

func (m *TokenOffer) GetValidUntilSeconds() int64 {
	if m != nil {
		return m.ValidUntilSeconds
	}
	return 0
}

type IssuerInfo struct {
	// This value is explicetely used by Replicator to uniquely identify related
	// issuer later in order to ban him (discredite case), since
	// "identity_pubkey", "host" may be changed
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The following field values are used to open payment channel, invoices
	// commands execution etc.
	IdentityPubkey string `protobuf:"bytes,2,opt,name=identity_pubkey,json=identityPubkey,proto3" json:"identity_pubkey,omitempty"`
	// Is used to establish client connection to the issuer's node during some
	// RPC calls
	Host                 string   `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssuerInfo) Reset()         { *m = IssuerInfo{} }
func (m *IssuerInfo) String() string { return proto.CompactTextString(m) }
func (*IssuerInfo) ProtoMessage()    {}
func (*IssuerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{5}
}

func (m *IssuerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssuerInfo.Unmarshal(m, b)
}
func (m *IssuerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssuerInfo.Marshal(b, m, deterministic)
}
func (m *IssuerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssuerInfo.Merge(m, src)
}
func (m *IssuerInfo) XXX_Size() int {
	return xxx_messageInfo_IssuerInfo.Size(m)
}
func (m *IssuerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_IssuerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_IssuerInfo proto.InternalMessageInfo

func (m *IssuerInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *IssuerInfo) GetIdentityPubkey() string {
	if m != nil {
		return m.IdentityPubkey
	}
	return ""
}

func (m *IssuerInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type VerifyTokenPurchaseRequest struct {
	Purchase             *TokenPurchase `protobuf:"bytes,1,opt,name=purchase,proto3" json:"purchase,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VerifyTokenPurchaseRequest) Reset()         { *m = VerifyTokenPurchaseRequest{} }
func (m *VerifyTokenPurchaseRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyTokenPurchaseRequest) ProtoMessage()    {}
func (*VerifyTokenPurchaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{6}
}

func (m *VerifyTokenPurchaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyTokenPurchaseRequest.Unmarshal(m, b)
}
func (m *VerifyTokenPurchaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyTokenPurchaseRequest.Marshal(b, m, deterministic)
}
func (m *VerifyTokenPurchaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyTokenPurchaseRequest.Merge(m, src)
}
func (m *VerifyTokenPurchaseRequest) XXX_Size() int {
	return xxx_messageInfo_VerifyTokenPurchaseRequest.Size(m)
}
func (m *VerifyTokenPurchaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyTokenPurchaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyTokenPurchaseRequest proto.InternalMessageInfo

func (m *VerifyTokenPurchaseRequest) GetPurchase() *TokenPurchase {
	if m != nil {
		return m.Purchase
	}
	return nil
}

type VerifyTokenSellRequest struct {
	Sell                 *TokenPurchase `protobuf:"bytes,1,opt,name=sell,proto3" json:"sell,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VerifyTokenSellRequest) Reset()         { *m = VerifyTokenSellRequest{} }
func (m *VerifyTokenSellRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyTokenSellRequest) ProtoMessage()    {}
func (*VerifyTokenSellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{7}
}

func (m *VerifyTokenSellRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyTokenSellRequest.Unmarshal(m, b)
}
func (m *VerifyTokenSellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyTokenSellRequest.Marshal(b, m, deterministic)
}
func (m *VerifyTokenSellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyTokenSellRequest.Merge(m, src)
}
func (m *VerifyTokenSellRequest) XXX_Size() int {
	return xxx_messageInfo_VerifyTokenSellRequest.Size(m)
}
func (m *VerifyTokenSellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyTokenSellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyTokenSellRequest proto.InternalMessageInfo

func (m *VerifyTokenSellRequest) GetSell() *TokenPurchase {
	if m != nil {
		return m.Sell
	}
	return nil
}

type RegisterTokenPurchaseRequest struct {
	Purchase             *TokenPurchase `protobuf:"bytes,1,opt,name=purchase,proto3" json:"purchase,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RegisterTokenPurchaseRequest) Reset()         { *m = RegisterTokenPurchaseRequest{} }
func (m *RegisterTokenPurchaseRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterTokenPurchaseRequest) ProtoMessage()    {}
func (*RegisterTokenPurchaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{8}
}

func (m *RegisterTokenPurchaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterTokenPurchaseRequest.Unmarshal(m, b)
}
func (m *RegisterTokenPurchaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterTokenPurchaseRequest.Marshal(b, m, deterministic)
}
func (m *RegisterTokenPurchaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterTokenPurchaseRequest.Merge(m, src)
}
func (m *RegisterTokenPurchaseRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterTokenPurchaseRequest.Size(m)
}
func (m *RegisterTokenPurchaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterTokenPurchaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterTokenPurchaseRequest proto.InternalMessageInfo

func (m *RegisterTokenPurchaseRequest) GetPurchase() *TokenPurchase {
	if m != nil {
		return m.Purchase
	}
	return nil
}

type RegisterTokenSellRequest struct {
	Sell                 *TokenPurchase `protobuf:"bytes,1,opt,name=sell,proto3" json:"sell,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RegisterTokenSellRequest) Reset()         { *m = RegisterTokenSellRequest{} }
func (m *RegisterTokenSellRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterTokenSellRequest) ProtoMessage()    {}
func (*RegisterTokenSellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{9}
}

func (m *RegisterTokenSellRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterTokenSellRequest.Unmarshal(m, b)
}
func (m *RegisterTokenSellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterTokenSellRequest.Marshal(b, m, deterministic)
}
func (m *RegisterTokenSellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterTokenSellRequest.Merge(m, src)
}
func (m *RegisterTokenSellRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterTokenSellRequest.Size(m)
}
func (m *RegisterTokenSellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterTokenSellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterTokenSellRequest proto.InternalMessageInfo

func (m *RegisterTokenSellRequest) GetSell() *TokenPurchase {
	if m != nil {
		return m.Sell
	}
	return nil
}

type TokenPurchase struct {
	Offer *TokenOffer `protobuf:"bytes,1,opt,name=offer,proto3" json:"offer,omitempty"`
	// Presents signature of an offer. This signature is used to identify,
	// that issuer accepts terms described in the offer and is responsible
	// to follow them in this transaction. If signature is not valid, then
	// channel should be closed. Otherwise, Replicator registers token
	// purchase details provided and tracks blockchain for a closing transaction
	// in order to determine if the issuer were not break terms
	IssuerSignature      string   `protobuf:"bytes,2,opt,name=issuer_signature,json=issuerSignature,proto3" json:"issuer_signature,omitempty"`
	InitialTxHash        string   `protobuf:"bytes,3,opt,name=initial_tx_hash,json=initialTxHash,proto3" json:"initial_tx_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenPurchase) Reset()         { *m = TokenPurchase{} }
func (m *TokenPurchase) String() string { return proto.CompactTextString(m) }
func (*TokenPurchase) ProtoMessage()    {}
func (*TokenPurchase) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{10}
}

func (m *TokenPurchase) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenPurchase.Unmarshal(m, b)
}
func (m *TokenPurchase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenPurchase.Marshal(b, m, deterministic)
}
func (m *TokenPurchase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenPurchase.Merge(m, src)
}
func (m *TokenPurchase) XXX_Size() int {
	return xxx_messageInfo_TokenPurchase.Size(m)
}
func (m *TokenPurchase) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenPurchase.DiscardUnknown(m)
}

var xxx_messageInfo_TokenPurchase proto.InternalMessageInfo

func (m *TokenPurchase) GetOffer() *TokenOffer {
	if m != nil {
		return m.Offer
	}
	return nil
}

func (m *TokenPurchase) GetIssuerSignature() string {
	if m != nil {
		return m.IssuerSignature
	}
	return ""
}

func (m *TokenPurchase) GetInitialTxHash() string {
	if m != nil {
		return m.InitialTxHash
	}
	return ""
}

// NOTE: we don't provide any token holder identification since the reqeuest is
// authorized with JWT applied to the request metadata. It means, that
// replicator is capable to extract all data needed to process the request
type GetTokenBalancesRequest struct {
	Params               *Pagination `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetTokenBalancesRequest) Reset()         { *m = GetTokenBalancesRequest{} }
func (m *GetTokenBalancesRequest) String() string { return proto.CompactTextString(m) }
func (*GetTokenBalancesRequest) ProtoMessage()    {}
func (*GetTokenBalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{11}
}

func (m *GetTokenBalancesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokenBalancesRequest.Unmarshal(m, b)
}
func (m *GetTokenBalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokenBalancesRequest.Marshal(b, m, deterministic)
}
func (m *GetTokenBalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenBalancesRequest.Merge(m, src)
}
func (m *GetTokenBalancesRequest) XXX_Size() int {
	return xxx_messageInfo_GetTokenBalancesRequest.Size(m)
}
func (m *GetTokenBalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenBalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenBalancesRequest proto.InternalMessageInfo

func (m *GetTokenBalancesRequest) GetParams() *Pagination {
	if m != nil {
		return m.Params
	}
	return nil
}

type GetTokenBalancesResponse struct {
	Balances             []*TokenBalance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
	Total                uint64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetTokenBalancesResponse) Reset()         { *m = GetTokenBalancesResponse{} }
func (m *GetTokenBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*GetTokenBalancesResponse) ProtoMessage()    {}
func (*GetTokenBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{12}
}

func (m *GetTokenBalancesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokenBalancesResponse.Unmarshal(m, b)
}
func (m *GetTokenBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokenBalancesResponse.Marshal(b, m, deterministic)
}
func (m *GetTokenBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenBalancesResponse.Merge(m, src)
}
func (m *GetTokenBalancesResponse) XXX_Size() int {
	return xxx_messageInfo_GetTokenBalancesResponse.Size(m)
}
func (m *GetTokenBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenBalancesResponse proto.InternalMessageInfo

func (m *GetTokenBalancesResponse) GetBalances() []*TokenBalance {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *GetTokenBalancesResponse) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type TokenBalance struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Available            uint64   `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	Frozen               uint64   `protobuf:"varint,3,opt,name=frozen,proto3" json:"frozen,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenBalance) Reset()         { *m = TokenBalance{} }
func (m *TokenBalance) String() string { return proto.CompactTextString(m) }
func (*TokenBalance) ProtoMessage()    {}
func (*TokenBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{13}
}

func (m *TokenBalance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenBalance.Unmarshal(m, b)
}
func (m *TokenBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenBalance.Marshal(b, m, deterministic)
}
func (m *TokenBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenBalance.Merge(m, src)
}
func (m *TokenBalance) XXX_Size() int {
	return xxx_messageInfo_TokenBalance.Size(m)
}
func (m *TokenBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenBalance.DiscardUnknown(m)
}

var xxx_messageInfo_TokenBalance proto.InternalMessageInfo

func (m *TokenBalance) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TokenBalance) GetAvailable() uint64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *TokenBalance) GetFrozen() uint64 {
	if m != nil {
		return m.Frozen
	}
	return 0
}

type Pagination struct {
	Limit                uint64   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               uint64   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pagination) Reset()         { *m = Pagination{} }
func (m *Pagination) String() string { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()    {}
func (*Pagination) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{14}
}

func (m *Pagination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pagination.Unmarshal(m, b)
}
func (m *Pagination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pagination.Marshal(b, m, deterministic)
}
func (m *Pagination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pagination.Merge(m, src)
}
func (m *Pagination) XXX_Size() int {
	return xxx_messageInfo_Pagination.Size(m)
}
func (m *Pagination) XXX_DiscardUnknown() {
	xxx_messageInfo_Pagination.DiscardUnknown(m)
}

var xxx_messageInfo_Pagination proto.InternalMessageInfo

func (m *Pagination) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Pagination) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type AuthRequest struct {
	Login                string   `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthRequest) Reset()         { *m = AuthRequest{} }
func (m *AuthRequest) String() string { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()    {}
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{15}
}

func (m *AuthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthRequest.Unmarshal(m, b)
}
func (m *AuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthRequest.Marshal(b, m, deterministic)
}
func (m *AuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthRequest.Merge(m, src)
}
func (m *AuthRequest) XXX_Size() int {
	return xxx_messageInfo_AuthRequest.Size(m)
}
func (m *AuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthRequest proto.InternalMessageInfo

func (m *AuthRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *AuthRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// We need this dataset to validate jwt which will be needed later when we will
// handle request with required login data. For this we save in memory jwt.
type AuthResponse struct {
	Jwt                  string   `protobuf:"bytes,1,opt,name=jwt,proto3" json:"jwt,omitempty"`
	ExpireDate           int64    `protobuf:"varint,2,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthResponse) Reset()         { *m = AuthResponse{} }
func (m *AuthResponse) String() string { return proto.CompactTextString(m) }
func (*AuthResponse) ProtoMessage()    {}
func (*AuthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{16}
}

func (m *AuthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthResponse.Unmarshal(m, b)
}
func (m *AuthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthResponse.Marshal(b, m, deterministic)
}
func (m *AuthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthResponse.Merge(m, src)
}
func (m *AuthResponse) XXX_Size() int {
	return xxx_messageInfo_AuthResponse.Size(m)
}
func (m *AuthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthResponse proto.InternalMessageInfo

func (m *AuthResponse) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

func (m *AuthResponse) GetExpireDate() int64 {
	if m != nil {
		return m.ExpireDate
	}
	return 0
}

type RegisterRequest struct {
	Login                string   `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{17}
}

func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRequest.Unmarshal(m, b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
}
func (m *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(m, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterRequest.Size(m)
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

func (m *RegisterRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *RegisterRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type VerifyIssuerRequest struct {
	Login                string   `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerifyIssuerRequest) Reset()         { *m = VerifyIssuerRequest{} }
func (m *VerifyIssuerRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyIssuerRequest) ProtoMessage()    {}
func (*VerifyIssuerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{18}
}

func (m *VerifyIssuerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerifyIssuerRequest.Unmarshal(m, b)
}
func (m *VerifyIssuerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerifyIssuerRequest.Marshal(b, m, deterministic)
}
func (m *VerifyIssuerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyIssuerRequest.Merge(m, src)
}
func (m *VerifyIssuerRequest) XXX_Size() int {
	return xxx_messageInfo_VerifyIssuerRequest.Size(m)
}
func (m *VerifyIssuerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyIssuerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyIssuerRequest proto.InternalMessageInfo

func (m *VerifyIssuerRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

// IssueTokenRequest — info about token will be issued
type IssueTokenRequest struct {
	// offer on token issue
	Offer                *TokenOffer `protobuf:"bytes,1,opt,name=offer,proto3" json:"offer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *IssueTokenRequest) Reset()         { *m = IssueTokenRequest{} }
func (m *IssueTokenRequest) String() string { return proto.CompactTextString(m) }
func (*IssueTokenRequest) ProtoMessage()    {}
func (*IssueTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{19}
}

func (m *IssueTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssueTokenRequest.Unmarshal(m, b)
}
func (m *IssueTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssueTokenRequest.Marshal(b, m, deterministic)
}
func (m *IssueTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueTokenRequest.Merge(m, src)
}
func (m *IssueTokenRequest) XXX_Size() int {
	return xxx_messageInfo_IssueTokenRequest.Size(m)
}
func (m *IssueTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IssueTokenRequest proto.InternalMessageInfo

func (m *IssueTokenRequest) GetOffer() *TokenOffer {
	if m != nil {
		return m.Offer
	}
	return nil
}

// UpdateTokenRequest — update info about current token
type UpdateTokenRequest struct {
	// offer with new data
	Offer                *TokenOffer `protobuf:"bytes,1,opt,name=offer,proto3" json:"offer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpdateTokenRequest) Reset()         { *m = UpdateTokenRequest{} }
func (m *UpdateTokenRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTokenRequest) ProtoMessage()    {}
func (*UpdateTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{20}
}

func (m *UpdateTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateTokenRequest.Unmarshal(m, b)
}
func (m *UpdateTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateTokenRequest.Marshal(b, m, deterministic)
}
func (m *UpdateTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTokenRequest.Merge(m, src)
}
func (m *UpdateTokenRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateTokenRequest.Size(m)
}
func (m *UpdateTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTokenRequest proto.InternalMessageInfo

func (m *UpdateTokenRequest) GetOffer() *TokenOffer {
	if m != nil {
		return m.Offer
	}
	return nil
}

// RevokeTokenRequest — request on delete info about token
type RevokeTokenRequest struct {
	// token_name  name of the deleted token
	TokenName string `protobuf:"bytes,1,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	// login of user issued this token
	Login                string   `protobuf:"bytes,2,opt,name=login,proto3" json:"login,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevokeTokenRequest) Reset()         { *m = RevokeTokenRequest{} }
func (m *RevokeTokenRequest) String() string { return proto.CompactTextString(m) }
func (*RevokeTokenRequest) ProtoMessage()    {}
func (*RevokeTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{21}
}

func (m *RevokeTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevokeTokenRequest.Unmarshal(m, b)
}
func (m *RevokeTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevokeTokenRequest.Marshal(b, m, deterministic)
}
func (m *RevokeTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevokeTokenRequest.Merge(m, src)
}
func (m *RevokeTokenRequest) XXX_Size() int {
	return xxx_messageInfo_RevokeTokenRequest.Size(m)
}
func (m *RevokeTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RevokeTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RevokeTokenRequest proto.InternalMessageInfo

func (m *RevokeTokenRequest) GetTokenName() string {
	if m != nil {
		return m.TokenName
	}
	return ""
}

func (m *RevokeTokenRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

// TokenInfoRequest — contain name of requested token
type TokenInfoRequest struct {
	// name of the token
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenInfoRequest) Reset()         { *m = TokenInfoRequest{} }
func (m *TokenInfoRequest) String() string { return proto.CompactTextString(m) }
func (*TokenInfoRequest) ProtoMessage()    {}
func (*TokenInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{22}
}

func (m *TokenInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenInfoRequest.Unmarshal(m, b)
}
func (m *TokenInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenInfoRequest.Marshal(b, m, deterministic)
}
func (m *TokenInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenInfoRequest.Merge(m, src)
}
func (m *TokenInfoRequest) XXX_Size() int {
	return xxx_messageInfo_TokenInfoRequest.Size(m)
}
func (m *TokenInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TokenInfoRequest proto.InternalMessageInfo

func (m *TokenInfoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// TokenInfoResponse — Token information with his name, price, expiration time
// and issuer login
type TokenInfoResponse struct {
	// name of the token
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// price of token in pkt
	// TODO: discuss
	//  ? Should we assume decimal prices
	//  ? Add units field
	Price uint64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	// valid_time is expiration date
	ValidTime int64 `protobuf:"varint,3,opt,name=valid_time,json=validTime,proto3" json:"valid_time,omitempty"`
	// issuer_login — user issued token
	IssuerLogin          string   `protobuf:"bytes,4,opt,name=issuer_login,json=issuerLogin,proto3" json:"issuer_login,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenInfoResponse) Reset()         { *m = TokenInfoResponse{} }
func (m *TokenInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TokenInfoResponse) ProtoMessage()    {}
func (*TokenInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f15fabe54a973d, []int{23}
}

func (m *TokenInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenInfoResponse.Unmarshal(m, b)
}
func (m *TokenInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenInfoResponse.Marshal(b, m, deterministic)
}
func (m *TokenInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenInfoResponse.Merge(m, src)
}
func (m *TokenInfoResponse) XXX_Size() int {
	return xxx_messageInfo_TokenInfoResponse.Size(m)
}
func (m *TokenInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TokenInfoResponse proto.InternalMessageInfo

func (m *TokenInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TokenInfoResponse) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TokenInfoResponse) GetValidTime() int64 {
	if m != nil {
		return m.ValidTime
	}
	return 0
}

func (m *TokenInfoResponse) GetIssuerLogin() string {
	if m != nil {
		return m.IssuerLogin
	}
	return ""
}

func init() {
	proto.RegisterType((*GetTokenOffersRequest)(nil), "replicator.GetTokenOffersRequest")
	proto.RegisterType((*GetTokenOffersResponse)(nil), "replicator.GetTokenOffersResponse")
	proto.RegisterType((*GetTokenListRequest)(nil), "replicator.GetTokenListRequest")
	proto.RegisterType((*GetTokenListResponse)(nil), "replicator.GetTokenListResponse")
	proto.RegisterType((*TokenOffer)(nil), "replicator.TokenOffer")
	proto.RegisterType((*IssuerInfo)(nil), "replicator.IssuerInfo")
	proto.RegisterType((*VerifyTokenPurchaseRequest)(nil), "replicator.VerifyTokenPurchaseRequest")
	proto.RegisterType((*VerifyTokenSellRequest)(nil), "replicator.VerifyTokenSellRequest")
	proto.RegisterType((*RegisterTokenPurchaseRequest)(nil), "replicator.RegisterTokenPurchaseRequest")
	proto.RegisterType((*RegisterTokenSellRequest)(nil), "replicator.RegisterTokenSellRequest")
	proto.RegisterType((*TokenPurchase)(nil), "replicator.TokenPurchase")
	proto.RegisterType((*GetTokenBalancesRequest)(nil), "replicator.GetTokenBalancesRequest")
	proto.RegisterType((*GetTokenBalancesResponse)(nil), "replicator.GetTokenBalancesResponse")
	proto.RegisterType((*TokenBalance)(nil), "replicator.TokenBalance")
	proto.RegisterType((*Pagination)(nil), "replicator.Pagination")
	proto.RegisterType((*AuthRequest)(nil), "replicator.AuthRequest")
	proto.RegisterType((*AuthResponse)(nil), "replicator.AuthResponse")
	proto.RegisterType((*RegisterRequest)(nil), "replicator.RegisterRequest")
	proto.RegisterType((*VerifyIssuerRequest)(nil), "replicator.VerifyIssuerRequest")
	proto.RegisterType((*IssueTokenRequest)(nil), "replicator.IssueTokenRequest")
	proto.RegisterType((*UpdateTokenRequest)(nil), "replicator.UpdateTokenRequest")
	proto.RegisterType((*RevokeTokenRequest)(nil), "replicator.RevokeTokenRequest")
	proto.RegisterType((*TokenInfoRequest)(nil), "replicator.TokenInfoRequest")
	proto.RegisterType((*TokenInfoResponse)(nil), "replicator.TokenInfoResponse")
}

func init() {
	proto.RegisterFile("protos/replicator/replicator.proto", fileDescriptor_f2f15fabe54a973d)
}

var fileDescriptor_f2f15fabe54a973d = []byte{
	// 1093 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x61, 0x73, 0xdb, 0x34,
	0x18, 0xbe, 0x34, 0x69, 0xaf, 0x79, 0xd3, 0x2d, 0xad, 0xba, 0x75, 0x26, 0x5d, 0x59, 0x67, 0x76,
	0xa5, 0xc0, 0x96, 0xdc, 0x95, 0x01, 0x77, 0x7c, 0xe1, 0xda, 0x6d, 0xd7, 0x95, 0x1b, 0x50, 0xdc,
	0x16, 0x6e, 0x3b, 0x20, 0xa7, 0xc4, 0x72, 0x22, 0xe2, 0x58, 0xc6, 0x92, 0xbb, 0x86, 0x2f, 0xfc,
	0x05, 0xfe, 0x24, 0xbf, 0x82, 0x2f, 0x9c, 0x25, 0x39, 0x96, 0xe3, 0x38, 0x1d, 0x1b, 0x7c, 0xc8,
	0x9d, 0xf4, 0xe8, 0xd1, 0x63, 0xbd, 0x92, 0xde, 0x47, 0x6f, 0xc0, 0x0e, 0x23, 0x26, 0x18, 0xef,
	0x44, 0x24, 0xf4, 0x69, 0x1f, 0x0b, 0x16, 0x19, 0xcd, 0xb6, 0x1c, 0x44, 0x90, 0x21, 0xad, 0xed,
	0x01, 0x63, 0x03, 0x9f, 0x74, 0xe4, 0x48, 0x2f, 0xf6, 0x3a, 0x64, 0x1c, 0x8a, 0x89, 0x22, 0xda,
	0x2e, 0xdc, 0x3e, 0x26, 0xe2, 0x9c, 0x8d, 0x48, 0xf0, 0x9d, 0xe7, 0x91, 0x88, 0x3b, 0xe4, 0xb7,
	0x98, 0x70, 0x81, 0xb6, 0xa1, 0x4e, 0x39, 0x8f, 0x49, 0xd4, 0xa5, 0xae, 0x55, 0xd9, 0xad, 0xec,
	0xd7, 0x9d, 0x55, 0x05, 0x9c, 0xb8, 0xa8, 0x0d, 0x2b, 0x21, 0x8e, 0xf0, 0x98, 0x5b, 0x4b, 0xbb,
	0x95, 0xfd, 0xc6, 0xc1, 0x56, 0xdb, 0x58, 0xc1, 0x29, 0x1e, 0xd0, 0x00, 0x0b, 0xca, 0x02, 0x47,
	0xb3, 0xec, 0x5f, 0x60, 0x6b, 0xf6, 0x2b, 0x3c, 0x64, 0x01, 0x27, 0x89, 0x12, 0x93, 0x88, 0x55,
	0xd9, 0xad, 0xce, 0x2a, 0x65, 0x13, 0x1c, 0xcd, 0x42, 0xb7, 0x60, 0x59, 0x30, 0x81, 0x7d, 0xf9,
	0xe1, 0x9a, 0xa3, 0x3a, 0x76, 0x0f, 0x36, 0x53, 0xfd, 0x17, 0x94, 0x8b, 0xff, 0x25, 0x86, 0x9f,
	0xe0, 0x56, 0xfe, 0x1b, 0x59, 0x04, 0x22, 0x01, 0xaf, 0x8d, 0x40, 0xb1, 0xf2, 0x11, 0x2c, 0xa7,
	0x11, 0xfc, 0x5d, 0x01, 0xc8, 0xc8, 0x8a, 0x34, 0x22, 0x81, 0x5e, 0xb5, 0xea, 0x24, 0x68, 0x18,
	0xd1, 0x3e, 0x49, 0x83, 0x97, 0x1d, 0xf4, 0x05, 0x34, 0xd2, 0x28, 0x03, 0x8f, 0x59, 0xd5, 0x62,
	0x34, 0x27, 0x2a, 0xe6, 0xc0, 0x63, 0x0e, 0xd0, 0x69, 0x1b, 0x3d, 0x04, 0x24, 0x75, 0xbb, 0x43,
	0xe6, 0xbb, 0x24, 0xea, 0xfa, 0x6c, 0x40, 0x03, 0xab, 0x26, 0xbf, 0xb8, 0x2e, 0x47, 0x9e, 0xcb,
	0x81, 0x17, 0x09, 0x8e, 0x3e, 0x86, 0x0d, 0xc5, 0xee, 0xc5, 0x93, 0x29, 0x79, 0x59, 0x92, 0x9b,
	0x72, 0xe0, 0x28, 0xc1, 0x15, 0xb7, 0x0d, 0x9b, 0x97, 0xd8, 0xa7, 0x6e, 0x37, 0x0e, 0x04, 0xf5,
	0xbb, 0x9c, 0xf4, 0x59, 0xe0, 0x72, 0x6b, 0x65, 0xb7, 0xb2, 0x5f, 0x75, 0x36, 0xe4, 0xd0, 0x45,
	0x32, 0x72, 0xa6, 0x06, 0xec, 0x97, 0x00, 0xd9, 0x1a, 0xd1, 0x4d, 0x58, 0x9a, 0x9e, 0xd7, 0x12,
	0x75, 0xd1, 0x87, 0xd0, 0xa4, 0x2e, 0x09, 0x04, 0x15, 0x93, 0x6e, 0x18, 0xf7, 0x46, 0x64, 0x22,
	0x37, 0xa0, 0xee, 0xdc, 0x4c, 0xe1, 0x53, 0x89, 0x22, 0x04, 0xb5, 0x21, 0xe3, 0x42, 0x6e, 0x41,
	0xdd, 0x91, 0x6d, 0xfb, 0x0c, 0x5a, 0x3f, 0x90, 0x88, 0x7a, 0x13, 0xb9, 0xbb, 0xa7, 0x71, 0xd4,
	0x1f, 0x62, 0x4e, 0xd2, 0x1b, 0xf2, 0x19, 0xac, 0x86, 0x1a, 0x92, 0x1f, 0x6c, 0x1c, 0xbc, 0x57,
	0x38, 0xbe, 0xe9, 0x9c, 0x29, 0xd5, 0x3e, 0x86, 0x2d, 0x43, 0xf4, 0x8c, 0xf8, 0x7e, 0x2a, 0xf8,
	0x08, 0x6a, 0x9c, 0xf8, 0xfe, 0xf5, 0x62, 0x92, 0x66, 0x5f, 0xc0, 0x5d, 0x87, 0x0c, 0x28, 0x17,
	0x24, 0xfa, 0x2f, 0xd7, 0x77, 0x02, 0x56, 0x4e, 0xf6, 0x1d, 0x56, 0xf8, 0x67, 0x05, 0x6e, 0xe4,
	0x70, 0xf4, 0x10, 0x96, 0x65, 0x32, 0x6a, 0x85, 0xb2, 0xfb, 0xae, 0x48, 0xe8, 0x23, 0x58, 0xd7,
	0xb7, 0x93, 0xd3, 0x41, 0x80, 0x45, 0x1c, 0x11, 0x7d, 0x7a, 0x4d, 0x85, 0x9f, 0xa5, 0x30, 0xda,
	0x83, 0x26, 0x0d, 0xa8, 0xa0, 0xd8, 0xef, 0x8a, 0xab, 0xee, 0x10, 0xf3, 0xa1, 0x3e, 0xc9, 0x1b,
	0x1a, 0x3e, 0xbf, 0x7a, 0x8e, 0xf9, 0xd0, 0x3e, 0x81, 0x3b, 0x69, 0x26, 0x1e, 0x61, 0x1f, 0x07,
	0x7d, 0x32, 0x75, 0xad, 0x2c, 0xa9, 0x2b, 0x6f, 0x94, 0xd4, 0x1e, 0x58, 0x45, 0x29, 0x9d, 0xd8,
	0x8f, 0x61, 0xb5, 0xa7, 0x31, 0x9d, 0xda, 0x56, 0x21, 0x54, 0x3d, 0xc9, 0x99, 0x32, 0x4b, 0x0c,
	0xea, 0x15, 0xac, 0x99, 0xfc, 0x92, 0xfc, 0xbe, 0x0b, 0x75, 0x7c, 0x89, 0xa9, 0x8f, 0x7b, 0x7e,
	0x9a, 0xe3, 0x19, 0x80, 0xb6, 0x60, 0xc5, 0x8b, 0xd8, 0xef, 0x24, 0x90, 0xbb, 0x52, 0x73, 0x74,
	0xcf, 0xfe, 0x12, 0x20, 0x8b, 0x2c, 0x51, 0xf6, 0xe9, 0x98, 0x0a, 0xa9, 0x5c, 0x73, 0x54, 0x27,
	0x99, 0xcb, 0x3c, 0x8f, 0x13, 0xa1, 0x65, 0x75, 0xcf, 0xfe, 0x0a, 0x1a, 0x87, 0xb1, 0x18, 0xa6,
	0xdb, 0x97, 0x4c, 0x96, 0x79, 0xad, 0x97, 0x25, 0x3b, 0xa8, 0x05, 0xab, 0x21, 0xe6, 0xfc, 0x35,
	0x8b, 0x5c, 0x7d, 0x74, 0xd3, 0xbe, 0x7d, 0x08, 0x6b, 0x4a, 0x40, 0x6f, 0xda, 0x3a, 0x54, 0x7f,
	0x7d, 0x2d, 0xf4, 0xfc, 0xa4, 0x89, 0xee, 0x41, 0x83, 0x5c, 0x85, 0x34, 0x22, 0x5d, 0x17, 0x0b,
	0x15, 0x56, 0xd5, 0x01, 0x05, 0x3d, 0xc5, 0x82, 0xd8, 0x4f, 0xa0, 0x99, 0x5e, 0xd6, 0xb7, 0x5f,
	0xc7, 0x27, 0xb0, 0xa9, 0x32, 0x52, 0xf9, 0xc8, 0x42, 0x21, 0xfb, 0x10, 0x36, 0x24, 0x4d, 0x1e,
	0x49, 0x4a, 0xfd, 0x57, 0xd7, 0xda, 0x3e, 0x02, 0x74, 0x11, 0x26, 0x01, 0xbd, 0x83, 0xc6, 0x09,
	0x20, 0x87, 0x5c, 0xb2, 0x51, 0x5e, 0x63, 0x07, 0x40, 0xf9, 0x6c, 0x80, 0xc7, 0x44, 0xaf, 0xbb,
	0x2e, 0x91, 0x6f, 0xf1, 0x98, 0x64, 0x11, 0x2d, 0x99, 0x11, 0xed, 0xc1, 0xba, 0x14, 0x91, 0x1e,
	0xaf, 0x85, 0x10, 0xd4, 0x0c, 0x09, 0xd9, 0xb6, 0xff, 0x80, 0x0d, 0x83, 0xa7, 0xcf, 0x6c, 0x0e,
	0xb1, 0xe4, 0xa9, 0xd9, 0x01, 0x50, 0xbe, 0x2e, 0xe8, 0x98, 0xc8, 0x6b, 0x58, 0x75, 0xea, 0x12,
	0x39, 0xa7, 0x63, 0x82, 0xee, 0xc3, 0x9a, 0xce, 0x75, 0xf3, 0x29, 0xd1, 0xaf, 0x93, 0x7c, 0x19,
	0x0e, 0xfe, 0x5a, 0x05, 0x70, 0xa6, 0x9b, 0x82, 0x7e, 0x84, 0x9b, 0xf9, 0xc2, 0x00, 0xdd, 0x37,
	0xf7, 0x6c, 0x6e, 0x69, 0xd2, 0xb2, 0x17, 0x51, 0x74, 0x4c, 0x17, 0xe9, 0x7d, 0xc8, 0x7b, 0xd7,
	0x9e, 0x39, 0xb5, 0xfc, 0x5d, 0x68, 0x6d, 0xb5, 0x55, 0xd1, 0xd4, 0x4e, 0x8b, 0xa6, 0xf6, 0xb3,
	0xa4, 0x68, 0x42, 0xdf, 0x40, 0x73, 0xc6, 0xf8, 0x91, 0x5d, 0x22, 0x69, 0x78, 0x6e, 0xa9, 0xdc,
	0x4b, 0xb8, 0x3d, 0xd7, 0xfe, 0xd1, 0xbe, 0x29, 0xba, 0xe8, 0x85, 0x28, 0x95, 0xfe, 0x1e, 0x36,
	0x0a, 0x4f, 0x00, 0x7a, 0x50, 0x2a, 0xfb, 0x26, 0xab, 0xfd, 0x19, 0xd6, 0x67, 0xcd, 0x12, 0x7d,
	0x30, 0xef, 0x2c, 0x66, 0x5c, 0xb9, 0xf5, 0x60, 0x31, 0x49, 0x1f, 0xd9, 0x53, 0x68, 0x26, 0x56,
	0x72, 0x9e, 0x15, 0x1e, 0xe8, 0x8e, 0x39, 0xd1, 0x30, 0xaa, 0x96, 0x55, 0x1c, 0xd0, 0x2a, 0x5f,
	0xc3, 0x66, 0x2e, 0x30, 0xad, 0xb4, 0x3d, 0x2f, 0xf2, 0xeb, 0x02, 0x9e, 0xd5, 0x52, 0xde, 0xf2,
	0x76, 0x5a, 0xc7, 0xb0, 0x66, 0x1a, 0x14, 0xba, 0x57, 0xbc, 0x36, 0x39, 0xeb, 0x2a, 0x15, 0x7a,
	0xa2, 0x6b, 0x25, 0xb9, 0x22, 0xb4, 0x53, 0xa8, 0xf3, 0x4c, 0x33, 0x29, 0x15, 0x79, 0x06, 0x0d,
	0xc3, 0xbe, 0xd0, 0xfb, 0xa6, 0x4a, 0xd1, 0xd7, 0x16, 0xc9, 0x18, 0x0e, 0x96, 0x97, 0x29, 0x5a,
	0xdb, 0x82, 0xbb, 0xba, 0x66, 0x96, 0xd6, 0xf9, 0xbd, 0x99, 0x53, 0xd8, 0xb7, 0x76, 0xcb, 0x09,
	0xea, 0x1a, 0x1c, 0x7d, 0xfe, 0xea, 0xf1, 0x80, 0x8a, 0x61, 0xdc, 0x6b, 0xf7, 0xd9, 0xb8, 0x13,
	0x8e, 0xc4, 0xa3, 0x3e, 0xe6, 0xc3, 0xa4, 0xe1, 0x76, 0xfc, 0x20, 0xf9, 0x45, 0x61, 0xbf, 0x53,
	0xf8, 0x27, 0xd5, 0x5b, 0x91, 0xd0, 0xa7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xf3, 0x83,
	0x0f, 0x65, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReplicatorClient is the client API for Replicator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReplicatorClient interface {
	// Returns available token offers
	GetTokenOffers(ctx context.Context, in *GetTokenOffersRequest, opts ...grpc.CallOption) (*GetTokenOffersResponse, error)
	// Verifies a signature of an issuer for this token purchase. This
	// method should be called before channel initialization
	VerifyTokenPurchase(ctx context.Context, in *VerifyTokenPurchaseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Verifies a signature of an issuer for this token sell. This
	// method should be called before channel initialization
	VerifyTokenSell(ctx context.Context, in *VerifyTokenSellRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Registers token purchase to be tracked on the blockchain
	// right after some necessary token purchase checks
	RegisterTokenPurchase(ctx context.Context, in *RegisterTokenPurchaseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Registers token sell to be tracked on the blockchain
	// right after some necessary token sell checks
	RegisterTokenSell(ctx context.Context, in *RegisterTokenSellRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Returns current token balances
	GetTokenBalances(ctx context.Context, in *GetTokenBalancesRequest, opts ...grpc.CallOption) (*GetTokenBalancesResponse, error)
	// Authentication user by login password pair, and generate jwt
	// Call it method after unlock pkt wallet
	AuthTokenHolder(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// Register new token holder user with passed password and login
	RegisterTokenHolder(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Register new issuer user with passed password and login
	RegisterTokenIssuer(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Verifies a user permitions to issue a token. Returns exceptions if
	// passed user is not contained in issuer's db
	VerifyIssuer(ctx context.Context, in *VerifyIssuerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// IssueToken — Issue new token with given data. Request data equal to
	// token purchase data, because it is token offer.
	IssueToken(ctx context.Context, in *IssueTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// UpdateToken — Update token inforamtion with given data. Request data
	// equal to token purchase data, because it is token offer.
	UpdateToken(ctx context.Context, in *UpdateTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// RevokeToken — Delete information about token by his name.
	RevokeToken(ctx context.Context, in *RevokeTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetTokenList — return list of issued token with infomation about
	// expiration time and fix price.
	GetTokenList(ctx context.Context, in *GetTokenListRequest, opts ...grpc.CallOption) (*GetTokenListResponse, error)
}

type replicatorClient struct {
	cc *grpc.ClientConn
}

func NewReplicatorClient(cc *grpc.ClientConn) ReplicatorClient {
	return &replicatorClient{cc}
}

func (c *replicatorClient) GetTokenOffers(ctx context.Context, in *GetTokenOffersRequest, opts ...grpc.CallOption) (*GetTokenOffersResponse, error) {
	out := new(GetTokenOffersResponse)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/GetTokenOffers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) VerifyTokenPurchase(ctx context.Context, in *VerifyTokenPurchaseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/VerifyTokenPurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) VerifyTokenSell(ctx context.Context, in *VerifyTokenSellRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/VerifyTokenSell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) RegisterTokenPurchase(ctx context.Context, in *RegisterTokenPurchaseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/RegisterTokenPurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) RegisterTokenSell(ctx context.Context, in *RegisterTokenSellRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/RegisterTokenSell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) GetTokenBalances(ctx context.Context, in *GetTokenBalancesRequest, opts ...grpc.CallOption) (*GetTokenBalancesResponse, error) {
	out := new(GetTokenBalancesResponse)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/GetTokenBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) AuthTokenHolder(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/AuthTokenHolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) RegisterTokenHolder(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/RegisterTokenHolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) RegisterTokenIssuer(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/RegisterTokenIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) VerifyIssuer(ctx context.Context, in *VerifyIssuerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/VerifyIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) IssueToken(ctx context.Context, in *IssueTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/IssueToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) UpdateToken(ctx context.Context, in *UpdateTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/UpdateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) RevokeToken(ctx context.Context, in *RevokeTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/RevokeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicatorClient) GetTokenList(ctx context.Context, in *GetTokenListRequest, opts ...grpc.CallOption) (*GetTokenListResponse, error) {
	out := new(GetTokenListResponse)
	err := c.cc.Invoke(ctx, "/replicator.Replicator/GetTokenList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicatorServer is the server API for Replicator service.
type ReplicatorServer interface {
	// Returns available token offers
	GetTokenOffers(context.Context, *GetTokenOffersRequest) (*GetTokenOffersResponse, error)
	// Verifies a signature of an issuer for this token purchase. This
	// method should be called before channel initialization
	VerifyTokenPurchase(context.Context, *VerifyTokenPurchaseRequest) (*empty.Empty, error)
	// Verifies a signature of an issuer for this token sell. This
	// method should be called before channel initialization
	VerifyTokenSell(context.Context, *VerifyTokenSellRequest) (*empty.Empty, error)
	// Registers token purchase to be tracked on the blockchain
	// right after some necessary token purchase checks
	RegisterTokenPurchase(context.Context, *RegisterTokenPurchaseRequest) (*empty.Empty, error)
	// Registers token sell to be tracked on the blockchain
	// right after some necessary token sell checks
	RegisterTokenSell(context.Context, *RegisterTokenSellRequest) (*empty.Empty, error)
	// Returns current token balances
	GetTokenBalances(context.Context, *GetTokenBalancesRequest) (*GetTokenBalancesResponse, error)
	// Authentication user by login password pair, and generate jwt
	// Call it method after unlock pkt wallet
	AuthTokenHolder(context.Context, *AuthRequest) (*AuthResponse, error)
	// Register new token holder user with passed password and login
	RegisterTokenHolder(context.Context, *RegisterRequest) (*empty.Empty, error)
	// Register new issuer user with passed password and login
	RegisterTokenIssuer(context.Context, *RegisterRequest) (*empty.Empty, error)
	// Verifies a user permitions to issue a token. Returns exceptions if
	// passed user is not contained in issuer's db
	VerifyIssuer(context.Context, *VerifyIssuerRequest) (*empty.Empty, error)
	// IssueToken — Issue new token with given data. Request data equal to
	// token purchase data, because it is token offer.
	IssueToken(context.Context, *IssueTokenRequest) (*empty.Empty, error)
	// UpdateToken — Update token inforamtion with given data. Request data
	// equal to token purchase data, because it is token offer.
	UpdateToken(context.Context, *UpdateTokenRequest) (*empty.Empty, error)
	// RevokeToken — Delete information about token by his name.
	RevokeToken(context.Context, *RevokeTokenRequest) (*empty.Empty, error)
	// GetTokenList — return list of issued token with infomation about
	// expiration time and fix price.
	GetTokenList(context.Context, *GetTokenListRequest) (*GetTokenListResponse, error)
}

// UnimplementedReplicatorServer can be embedded to have forward compatible implementations.
type UnimplementedReplicatorServer struct {
}

func (*UnimplementedReplicatorServer) GetTokenOffers(ctx context.Context, req *GetTokenOffersRequest) (*GetTokenOffersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenOffers not implemented")
}
func (*UnimplementedReplicatorServer) VerifyTokenPurchase(ctx context.Context, req *VerifyTokenPurchaseRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTokenPurchase not implemented")
}
func (*UnimplementedReplicatorServer) VerifyTokenSell(ctx context.Context, req *VerifyTokenSellRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTokenSell not implemented")
}
func (*UnimplementedReplicatorServer) RegisterTokenPurchase(ctx context.Context, req *RegisterTokenPurchaseRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTokenPurchase not implemented")
}
func (*UnimplementedReplicatorServer) RegisterTokenSell(ctx context.Context, req *RegisterTokenSellRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTokenSell not implemented")
}
func (*UnimplementedReplicatorServer) GetTokenBalances(ctx context.Context, req *GetTokenBalancesRequest) (*GetTokenBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenBalances not implemented")
}
func (*UnimplementedReplicatorServer) AuthTokenHolder(ctx context.Context, req *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthTokenHolder not implemented")
}
func (*UnimplementedReplicatorServer) RegisterTokenHolder(ctx context.Context, req *RegisterRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTokenHolder not implemented")
}
func (*UnimplementedReplicatorServer) RegisterTokenIssuer(ctx context.Context, req *RegisterRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTokenIssuer not implemented")
}
func (*UnimplementedReplicatorServer) VerifyIssuer(ctx context.Context, req *VerifyIssuerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyIssuer not implemented")
}
func (*UnimplementedReplicatorServer) IssueToken(ctx context.Context, req *IssueTokenRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueToken not implemented")
}
func (*UnimplementedReplicatorServer) UpdateToken(ctx context.Context, req *UpdateTokenRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (*UnimplementedReplicatorServer) RevokeToken(ctx context.Context, req *RevokeTokenRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeToken not implemented")
}
func (*UnimplementedReplicatorServer) GetTokenList(ctx context.Context, req *GetTokenListRequest) (*GetTokenListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenList not implemented")
}

func RegisterReplicatorServer(s *grpc.Server, srv ReplicatorServer) {
	s.RegisterService(&_Replicator_serviceDesc, srv)
}

func _Replicator_GetTokenOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenOffersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).GetTokenOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/GetTokenOffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).GetTokenOffers(ctx, req.(*GetTokenOffersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_VerifyTokenPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).VerifyTokenPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/VerifyTokenPurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).VerifyTokenPurchase(ctx, req.(*VerifyTokenPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_VerifyTokenSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenSellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).VerifyTokenSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/VerifyTokenSell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).VerifyTokenSell(ctx, req.(*VerifyTokenSellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_RegisterTokenPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTokenPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).RegisterTokenPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/RegisterTokenPurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).RegisterTokenPurchase(ctx, req.(*RegisterTokenPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_RegisterTokenSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTokenSellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).RegisterTokenSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/RegisterTokenSell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).RegisterTokenSell(ctx, req.(*RegisterTokenSellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_GetTokenBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).GetTokenBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/GetTokenBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).GetTokenBalances(ctx, req.(*GetTokenBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_AuthTokenHolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).AuthTokenHolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/AuthTokenHolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).AuthTokenHolder(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_RegisterTokenHolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).RegisterTokenHolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/RegisterTokenHolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).RegisterTokenHolder(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_RegisterTokenIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).RegisterTokenIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/RegisterTokenIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).RegisterTokenIssuer(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_VerifyIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).VerifyIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/VerifyIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).VerifyIssuer(ctx, req.(*VerifyIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_IssueToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).IssueToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/IssueToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).IssueToken(ctx, req.(*IssueTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/UpdateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).UpdateToken(ctx, req.(*UpdateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_RevokeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).RevokeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/RevokeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).RevokeToken(ctx, req.(*RevokeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replicator_GetTokenList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatorServer).GetTokenList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicator.Replicator/GetTokenList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatorServer).GetTokenList(ctx, req.(*GetTokenListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Replicator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "replicator.Replicator",
	HandlerType: (*ReplicatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTokenOffers",
			Handler:    _Replicator_GetTokenOffers_Handler,
		},
		{
			MethodName: "VerifyTokenPurchase",
			Handler:    _Replicator_VerifyTokenPurchase_Handler,
		},
		{
			MethodName: "VerifyTokenSell",
			Handler:    _Replicator_VerifyTokenSell_Handler,
		},
		{
			MethodName: "RegisterTokenPurchase",
			Handler:    _Replicator_RegisterTokenPurchase_Handler,
		},
		{
			MethodName: "RegisterTokenSell",
			Handler:    _Replicator_RegisterTokenSell_Handler,
		},
		{
			MethodName: "GetTokenBalances",
			Handler:    _Replicator_GetTokenBalances_Handler,
		},
		{
			MethodName: "AuthTokenHolder",
			Handler:    _Replicator_AuthTokenHolder_Handler,
		},
		{
			MethodName: "RegisterTokenHolder",
			Handler:    _Replicator_RegisterTokenHolder_Handler,
		},
		{
			MethodName: "RegisterTokenIssuer",
			Handler:    _Replicator_RegisterTokenIssuer_Handler,
		},
		{
			MethodName: "VerifyIssuer",
			Handler:    _Replicator_VerifyIssuer_Handler,
		},
		{
			MethodName: "IssueToken",
			Handler:    _Replicator_IssueToken_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _Replicator_UpdateToken_Handler,
		},
		{
			MethodName: "RevokeToken",
			Handler:    _Replicator_RevokeToken_Handler,
		},
		{
			MethodName: "GetTokenList",
			Handler:    _Replicator_GetTokenList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/replicator/replicator.proto",
}
